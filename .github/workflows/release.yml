name: release
on:
  push:
    branches:
      - main 
  workflow_dispatch:
    inputs:
      reason:
        description: 'the reason for triggering this workflow'
        required: false
        default: 'manually publish the pre-built ecr images'
jobs:

  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.GH_ACTIONS_AWS_ACCESS_KEY_ID_DEVELOPMENT }}
          aws-secret-access-key: ${{ secrets.GH_ACTIONS_AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}
          aws-region: us-west-2

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Build the Docker image
      - name: Build Docker image
        run: |
          cd src
          docker buildx build --platform linux/x86_64 -t bedrock-access-gateway:latest .

      # Step 5: Tag the Docker image
      - name: Tag Docker image
        run: |
          docker tag bedrock-access-gateway:latest 835453518493.dkr.ecr.us-west-2.amazonaws.com/bedrock-access-gateway:latest


      # Step 6: Push the Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push 835453518493.dkr.ecr.us-west-2.amazonaws.com/bedrock-access-gateway:latest


  cfn_templates:
    name: Development
    environment: development
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.GH_ACTIONS_AWS_ACCESS_KEY_ID_DEVELOPMENT }}
          aws-secret-access-key: ${{ secrets.GH_ACTIONS_AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}
          aws-region: us-west-2

      - name: Check and create bucket if it does not exist
        run: |
          bucket_name=falcon-ai-bedrock-accesss-gateway
          region=us-west-2
          if aws s3api head-bucket --bucket "$bucket_name" 2>/dev/null; then
            echo "Bucket already exists."
          else
            echo "Bucket does not exist. Creating bucket..."
            aws s3api create-bucket --bucket "$bucket_name" --region "$region" --create-bucket-configuration LocationConstraint="$region"
          fi
      - name: Copy Deployment Templates to S3
        env:
          S3_BUCKET: falcon-ai-bedrock-accesss-gateway

        run: aws s3 sync deployment/ s3://$S3_BUCKET/

      - name: Deploy CloudFormation Stack
       run: |
         stack_name="BedrockProxyStackTest"
         template_file="./deployment/BedrockProxy.template" # Local file path
         region="us-west-2"
         api_key_secret_arn="arn:aws:secretsmanager:us-west-2:123456789012:secret:MyApiKeySecret"
         default_model_id="anthropic.claude-3-sonnet-20240229-v1:0"

         aws cloudformation deploy \
           --stack-name "$stack_name" \
           --template-file "$template_file" \
           --region "$region" \
           --capabilities CAPABILITY_NAMED_IAM \
           --parameter-overrides \
             ApiKeySecretArn="$api_key_secret_arn" \
             DefaultModelId="$default_model_id"